#!/usr/bin/env node

/**
 * 注意: 这个脚本文件中，不要出现es6语法
 */

"use strict";

var chalk = require("chalk");
const { Command } = require("commander");
var pkg = require("../package.json");
var fs = require("fs");
var os = require("os");
var path = require("path");
// var checkVersion = require('../lib/check_versions');

const program = new Command();

if (/\/hc$/.test(process.argv[1])) {
    process.argv[1] = process.argv[1].replace(/\/hc$/, "/honeycomb");
}

// logo maker: http://patorjk.com/software/taag/#p=display&h=1&f=Slant&t=honeycomb
let logo = `
                          ______ __ _ 
 _      __ ____   ____   / ____// /(_)
| | /| / // __ \ / __ \ / /    / // / 
| |/ |/ // /_/ // /_/ // /___ / // /  
|__/|__/ \____/ \____/ \____//_//_/   

`;

console.log(chalk.green(logo)); // eslint-disable-line

function compareVersion(ver1, ver2) {
    let arr1 = ver1.split(".");
    let arr2 = ver2.split(".");

    if (ver1 === ver2) {
        return 0;
    }

    for (let i = 0; i < arr1.length; i++) {
        if (arr1[i] !== arr2[i]) {
            return +arr1[i] > +arr2[i] ? 1 : -1;
        }
    }
}

/* es6 support see http://node.green/ */
if (compareVersion(process.versions.node, "8.0.0") < 0) {
    /*eslint-disable */
    console.error(
        chalk.red("------------------------- ERROR ---------------------------")
    );
    console.error(
        chalk.yellow(
            "Your Node.js version is too old, please upgrade to >= 8.0.0"
        )
    );
    console.error(
        chalk.red("-----------------------------------------------------------")
    );
    /* eslint-enable */
    process.exit(1);
}

function printVersion() {
    console.log(`${pkg.name}@${pkg.version}`); // eslint-disable-line
}

program
    .name(pkg.name)
    .description("CLI to some JavaScript string utilities")
    .version(pkg.version);

program.command("init [name]", "install one or more packages");
// .command("update", "update installed packages", {
//     executableFile: "myUpdateSubCommand",
// })
// .command("list", "list packages installed", { isDefault: true });

program.parse();

// program
//     .option(`${pkg.name}@${pkg.version}`)
//     .option("init [appName]", "create an app with initial code.")
//     .option("start [appPath]", "start the app.")
//     .option("package", "pack the files into a tgz file.")
//     .alias("pack")
//     .option("minify", "minify the js files.")
//     .option("app", "echo appname, version, build")
//     .option("pwd [password]", "generate a password hash")
//     .option("token", "generate a random token")
//     .option("config", "get or set global config")
//     .option("-v, --version", "output the version number", printVersion)
//     .parse(process.argv);
